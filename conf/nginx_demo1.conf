worker_processes 4;
error_log logs/error.log;

events {
    worker_connections 1024;
}

http {
    server {
        listen 80;

#        lua_need_request_body on;

        location = /foo {
            content_by_lua_block {
                ngx.say('I am foo')
            }
        }

        location / {
#            default_type text/html;
#            content_by_lua_block {
#                -- return ngx.redirect('/foo')
#                ngx.exec('/foo')
#            }
            content_by_lua_block {
                local num = 55
                local str = 'string'
                local obj
                ngx.log(ngx.ERR, ' num:', num)
                ngx.log(ngx.INFO, ' string: ', str)
                print('i am print')
                ngx.log(ngx.ERR, ' object: ', obj)
            }
        }

        location = /sum {
            # 只允许内部调用
            internal;
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }

        location = /subduction {
            internal;
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }

        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi({
                    {'/sum', {args = { a = 3, b = 8}}},
                    {'/subduction', {args = { a = 3, b = 8}}}
                })
                ngx.say('status: ', res1.status, ' response:', res1.body)
                ngx.say('status: ', res2.status, ' response:', res2.body)
                ngx.say('time used:', ngx.now() - start_time)
            }
        }

        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1 = ngx.location.capture_multi({
                    {'/sum', {args={a=3, b=8}}}
                })
                local res2 = ngx.location.capture_multi({
                    {'/subduction', {args = {a = 3, b = 8}}}
                })
                ngx.say('status:', res1.status, ' response:', res1.body)
                ngx.say('status:', res2.status, ' response:', res2.body)
                ngx.say('time used:', ngx.now() - start_time)
            }
        }

        location = /app/test {

            content_by_lua_block {
                local res = ngx.location.capture('/sum', {args={a=3, b=8}})
                ngx.say("status", res.status, " response:", res.body)
            }
        }

        location = /print_param {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                for i, v in pairs(args) do
                    ngx.say('GET KEY = ', i, ' VALUE = ', v)
                end

                ngx.req.read_body()

                local args2 = ngx.req.get_post_args()
                for k, v in pairs(args2) do
                    ngx.say('POST key = ', k, ' value = ', v)
                end
            }
        }

        location = /test {
#            content_by_lua_block {
#                local res = ngx.location.capture('/print_param',
#                    {method=ngx.HTTP_POST,
#                     args = ngx.encode_args({a = 1, b = 2}),
#                     body = ngx.encode_args({c = 3, d = 4})
#                     }
#                )
#                ngx.say('status = ', res.status, ' body = ', res.body)
#            }
#            content_by_lua_block {
#                ngx.req.read_body()
#                local data = ngx.req.get_body_data()
#                ngx.say("body: ", data)
#            }
            content_by_lua_block {
                ngx.say("Hello")
                ngx.sleep(3)
                ngx.say(" the world")
            }
        }

        location = /test2 {
            content_by_lua_block {
                ngx.say("Hello")
                ngx.flush()
                ngx.sleep(3)
                ngx.say(" the world")
            }
        }
    }
}